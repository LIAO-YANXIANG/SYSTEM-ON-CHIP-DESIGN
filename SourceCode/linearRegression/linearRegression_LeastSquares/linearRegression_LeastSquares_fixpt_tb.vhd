-- -------------------------------------------------------------
-- 
-- File Name: D:\GSLAB\FPGA_LinearRegression\G01-SourceCode\codegen\linearRegression_LeastSquares\hdlsrc\linearRegression_LeastSquares_fixpt_tb.vhd
-- Created: 2022-05-07 22:24:43
-- 
-- Generated by MATLAB 9.11, MATLAB Coder 5.3 and HDL Coder 3.19
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- m                             ce_out        1
-- b                             ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: linearRegression_LeastSquares_fixpt_tb
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_textio.ALL;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY STD;
USE STD.textio.ALL;
LIBRARY work;
USE work.linearRegression_LeastSquares_fixpt_pkg.ALL;
USE work.linearRegression_LeastSquares_fixpt_tb_pkg.ALL;

ENTITY linearRegression_LeastSquares_fixpt_tb IS
END linearRegression_LeastSquares_fixpt_tb;


ARCHITECTURE rtl OF linearRegression_LeastSquares_fixpt_tb IS

  -- Component Declarations
  COMPONENT linearRegression_LeastSquares_fixpt
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          Sum_x                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14
          Sum_y                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14
          Sum_xy                          :   IN    std_logic_vector(22 DOWNTO 0);  -- sfix23
          Sum_xx                          :   IN    std_logic_vector(22 DOWNTO 0);  -- sfix23
          ce_out                          :   OUT   std_logic;
          m                               :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En13
          b                               :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En4
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : linearRegression_LeastSquares_fixpt
    USE ENTITY work.linearRegression_LeastSquares_fixpt(rtl);

  -- Signals
  SIGNAL clk                              : std_logic;
  SIGNAL reset                            : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL b_done                           : std_logic;  -- ufix1
  SIGNAL rdEnb                            : std_logic;
  SIGNAL b_done_enb                       : std_logic;  -- ufix1
  SIGNAL m_addr                           : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL b_lastAddr                       : std_logic;  -- ufix1
  SIGNAL resetn                           : std_logic;
  SIGNAL check2_done                      : std_logic;  -- ufix1
  SIGNAL m_done                           : std_logic;  -- ufix1
  SIGNAL m_done_enb                       : std_logic;  -- ufix1
  SIGNAL m_active                         : std_logic;  -- ufix1
  SIGNAL Sum_x_addr                       : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Sum_xx_addr_delay_1              : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL tb_enb                           : std_logic;
  SIGNAL rawData_Sum_xx                   : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL holdData_Sum_xx                  : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL Sum_xx_offset                    : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL Sum_xx                           : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL Sum_xx_1                         : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL Sum_xy_addr_delay_1              : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL rawData_Sum_xy                   : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL holdData_Sum_xy                  : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL Sum_xy_offset                    : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL Sum_xy                           : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL Sum_xy_1                         : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL Sum_y_addr_delay_1               : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL rawData_Sum_y                    : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL holdData_Sum_y                   : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL Sum_y_offset                     : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL Sum_y                            : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL Sum_y_1                          : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL Sum_x_active                     : std_logic;  -- ufix1
  SIGNAL Sum_x_enb                        : std_logic;  -- ufix1
  SIGNAL Sum_x_addr_delay_1               : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL rawData_Sum_x                    : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL holdData_Sum_x                   : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL Sum_x_offset                     : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL Sum_x_1                          : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL Sum_x_2                          : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL snkDone                          : std_logic;
  SIGNAL snkDonen                         : std_logic;
  SIGNAL ce_out                           : std_logic;
  SIGNAL m                                : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL b                                : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL m_enb                            : std_logic;  -- ufix1
  SIGNAL m_lastAddr                       : std_logic;  -- ufix1
  SIGNAL check1_done                      : std_logic;  -- ufix1
  SIGNAL m_chkcnt                         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL m_ignCntDone                     : std_logic;  -- ufix1
  SIGNAL m_needToCount                    : std_logic;  -- ufix1
  SIGNAL m_chkenb                         : std_logic;  -- ufix1
  SIGNAL m_chkdata                        : std_logic;  -- ufix1
  SIGNAL m_addr_delay_1                   : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL m_signed                         : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL m_expected                       : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL m_ref                            : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL m_testFailure                    : std_logic;  -- ufix1
  SIGNAL b_chkcnt                         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL b_ignCntDone                     : std_logic;  -- ufix1
  SIGNAL b_needToCount                    : std_logic;  -- ufix1
  SIGNAL b_chkenb                         : std_logic;  -- ufix1
  SIGNAL b_chkdata                        : std_logic;  -- ufix1
  SIGNAL b_addr_delay_1                   : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL b_signed                         : signed(23 DOWNTO 0);  -- sfix24_En4
  SIGNAL b_expected                       : signed(23 DOWNTO 0);  -- sfix24_En4
  SIGNAL b_ref                            : signed(23 DOWNTO 0);  -- sfix24_En4
  SIGNAL b_testFailure                    : std_logic;  -- ufix1
  SIGNAL testFailure                      : std_logic;  -- ufix1
  
  file m_unsigned_buf				  : text;
  file b_unsigned_buf				  : text;

  
  signal m_unsigned                  : unsigned(23 downto 0); 
  signal b_unsigned                  : unsigned(23 downto 0); 

BEGIN
  u_linearRegression_LeastSquares_fixpt : linearRegression_LeastSquares_fixpt
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => enb,
              Sum_x => Sum_x_2,  -- sfix14
              Sum_y => Sum_y_1,  -- sfix14
              Sum_xy => Sum_xy_1,  -- sfix23
              Sum_xx => Sum_xx_1,  -- sfix23
              ce_out => ce_out,
              m => m,  -- sfix24_En13
              b => b  -- sfix24_En4
              );

  b_done_enb <= b_done AND rdEnb;

  
  b_lastAddr <= '1' WHEN m_addr >= to_unsigned(16#BBC#, 12) ELSE
      '0';

  b_done <= b_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_2_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check2_done <= '0';
    ELSIF rising_edge(clk) THEN
      IF b_done_enb = '1' THEN
        check2_done <= b_done;
      END IF;
    END IF;
  END PROCESS checkDone_2_process;

  m_done_enb <= m_done AND rdEnb;

  
  m_active <= '1' WHEN m_addr /= to_unsigned(16#BBC#, 12) ELSE
      '0';

  Sum_xx_addr_delay_1 <= Sum_x_addr AFTER 1 ns;

  -- Data source for Sum_xx
  Sum_xx_fileread: PROCESS (Sum_xx_addr_delay_1, tb_enb, rdEnb)
    FILE fp: TEXT open READ_MODE is "Sum_xx.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(23 DOWNTO 0);

  BEGIN
    IF tb_enb /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    rawData_Sum_xx <= signed(read_data(22 DOWNTO 0));
  END PROCESS Sum_xx_fileread;

  -- holdData reg for Sum_xx
  stimuli_Sum_xx_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_Sum_xx <= (OTHERS => 'X');
    ELSIF rising_edge(clk) THEN
      holdData_Sum_xx <= rawData_Sum_xx;
    END IF;
  END PROCESS stimuli_Sum_xx_process;

  stimuli_Sum_xx_1: PROCESS (rawData_Sum_xx, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      Sum_xx_offset <= holdData_Sum_xx;
    ELSE
      Sum_xx_offset <= rawData_Sum_xx;
    END IF;
  END PROCESS stimuli_Sum_xx_1;

  Sum_xx <= Sum_xx_offset AFTER 2 ns;

  Sum_xx_1 <= std_logic_vector(Sum_xx);

  Sum_xy_addr_delay_1 <= Sum_x_addr AFTER 1 ns;

  -- Data source for Sum_xy
  Sum_xy_fileread: PROCESS (Sum_xy_addr_delay_1, tb_enb, rdEnb)
    FILE fp: TEXT open READ_MODE is "Sum_xy.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(23 DOWNTO 0);

  BEGIN
    IF tb_enb /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    rawData_Sum_xy <= signed(read_data(22 DOWNTO 0));
  END PROCESS Sum_xy_fileread;

  -- holdData reg for Sum_xy
  stimuli_Sum_xy_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_Sum_xy <= (OTHERS => 'X');
    ELSIF rising_edge(clk) THEN
      holdData_Sum_xy <= rawData_Sum_xy;
    END IF;
  END PROCESS stimuli_Sum_xy_process;

  stimuli_Sum_xy_1: PROCESS (rawData_Sum_xy, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      Sum_xy_offset <= holdData_Sum_xy;
    ELSE
      Sum_xy_offset <= rawData_Sum_xy;
    END IF;
  END PROCESS stimuli_Sum_xy_1;

  Sum_xy <= Sum_xy_offset AFTER 2 ns;

  Sum_xy_1 <= std_logic_vector(Sum_xy);

  Sum_y_addr_delay_1 <= Sum_x_addr AFTER 1 ns;

  -- Data source for Sum_y
  Sum_y_fileread: PROCESS (Sum_y_addr_delay_1, tb_enb, rdEnb)
    FILE fp: TEXT open READ_MODE is "Sum_y.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(15 DOWNTO 0);

  BEGIN
    IF tb_enb /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    rawData_Sum_y <= signed(read_data(13 DOWNTO 0));
  END PROCESS Sum_y_fileread;

  -- holdData reg for Sum_y
  stimuli_Sum_y_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_Sum_y <= (OTHERS => 'X');
    ELSIF rising_edge(clk) THEN
      holdData_Sum_y <= rawData_Sum_y;
    END IF;
  END PROCESS stimuli_Sum_y_process;

  stimuli_Sum_y_1: PROCESS (rawData_Sum_y, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      Sum_y_offset <= holdData_Sum_y;
    ELSE
      Sum_y_offset <= rawData_Sum_y;
    END IF;
  END PROCESS stimuli_Sum_y_1;

  Sum_y <= Sum_y_offset AFTER 2 ns;

  Sum_y_1 <= std_logic_vector(Sum_y);

  
  Sum_x_active <= '1' WHEN Sum_x_addr /= to_unsigned(16#BC1#, 12) ELSE
      '0';

  Sum_x_enb <= Sum_x_active AND (rdEnb AND tb_enb);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 3009
  Sum_x_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sum_x_addr <= to_unsigned(16#000#, 12);
    ELSIF rising_edge(clk) THEN
      IF Sum_x_enb = '1' THEN
        IF Sum_x_addr >= to_unsigned(16#BC1#, 12) THEN 
          Sum_x_addr <= to_unsigned(16#000#, 12);
        ELSE 
          Sum_x_addr <= Sum_x_addr + to_unsigned(16#001#, 12);
        END IF;
      END IF;
    END IF;
  END PROCESS Sum_x_process;


  Sum_x_addr_delay_1 <= Sum_x_addr AFTER 1 ns;

  -- Data source for Sum_x
  Sum_x_fileread: PROCESS (Sum_x_addr_delay_1, tb_enb, rdEnb)
    FILE fp: TEXT open READ_MODE is "Sum_x.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(15 DOWNTO 0);

  BEGIN
    IF tb_enb /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    rawData_Sum_x <= signed(read_data(13 DOWNTO 0));
  END PROCESS Sum_x_fileread;

  -- holdData reg for Sum_x
  stimuli_Sum_x_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_Sum_x <= (OTHERS => 'X');
    ELSIF rising_edge(clk) THEN
      holdData_Sum_x <= rawData_Sum_x;
    END IF;
  END PROCESS stimuli_Sum_x_process;

  stimuli_Sum_x_1: PROCESS (rawData_Sum_x, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      Sum_x_offset <= holdData_Sum_x;
    ELSE
      Sum_x_offset <= rawData_Sum_x;
    END IF;
  END PROCESS stimuli_Sum_x_1;

  Sum_x_1 <= Sum_x_offset AFTER 2 ns;

  Sum_x_2 <= std_logic_vector(Sum_x_1);

  snkDonen <=  NOT snkDone;

  resetn <=  NOT reset;

  tb_enb <= resetn AND snkDonen;

  
  rdEnb <= tb_enb WHEN snkDone = '0' ELSE
      '0';

  enb <= rdEnb AFTER 2 ns;

  reset_gen: PROCESS 
  BEGIN
    reset <= '1';
    WAIT FOR 20 ns;
    WAIT UNTIL rising_edge(clk);
    WAIT FOR 2 ns;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  clk_gen: PROCESS 
  BEGIN
    clk <= '1';
    WAIT FOR 5 ns;
    clk <= '0';
    WAIT FOR 5 ns;
    IF snkDone = '1' THEN
      clk <= '1';
      WAIT FOR 5 ns;
      clk <= '0';
      WAIT FOR 5 ns;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  m_enb <= ce_out AND m_active;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 3004
  m_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      m_addr <= to_unsigned(16#000#, 12);
    ELSIF rising_edge(clk) THEN
      IF m_enb = '1' THEN
        IF m_addr >= to_unsigned(16#BBC#, 12) THEN 
          m_addr <= to_unsigned(16#000#, 12);
        ELSE 
          m_addr <= m_addr + to_unsigned(16#001#, 12);
        END IF;
      END IF;
    END IF;
  END PROCESS m_1_process;


  
  m_lastAddr <= '1' WHEN m_addr >= to_unsigned(16#BBC#, 12) ELSE
      '0';

  m_done <= m_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_done <= '0';
    ELSIF rising_edge(clk) THEN
      IF m_done_enb = '1' THEN
        check1_done <= m_done;
      END IF;
    END IF;
  END PROCESS checkDone_1_process;

  snkDone <= check1_done AND check2_done;

  
  m_ignCntDone <= '1' WHEN m_chkcnt /= to_unsigned(16#5#, 3) ELSE
      '0';

  m_needToCount <= ce_out AND m_ignCntDone;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 5
  m_IgnoreDataChecking_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      m_chkcnt <= to_unsigned(16#0#, 3);
    ELSIF rising_edge(clk) THEN
      IF m_needToCount = '1' THEN
        IF m_chkcnt >= to_unsigned(16#5#, 3) THEN 
          m_chkcnt <= to_unsigned(16#0#, 3);
        ELSE 
          m_chkcnt <= m_chkcnt + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS m_IgnoreDataChecking_process;


  
  m_chkenb <= '1' WHEN m_chkcnt = to_unsigned(16#5#, 3) ELSE
      '0';

  m_chkdata <= ce_out AND m_chkenb;

  m_addr_delay_1 <= m_addr AFTER 1 ns;

  -- m_signed <= signed(m);
  ------------------------------------------------------------------------------------- write m CSV
  m_signed <= signed(m);
  m_unsigned <= unsigned(m);
  file_open(m_unsigned_buf, "m_unsigned.csv"  , write_mode);
  process
	variable write_m : line;
	variable i : integer range 0 to 3000;
  begin
	wait for 71 ns;
	for i in 0 to 3000 loop
		write(write_m,to_integer(m_unsigned));
		write(write_m,string'(","));
		wait for 10 ns;
	end loop;
	writeline(m_unsigned_buf,write_m);
	wait;
  end process;
  -------------------------------------------------------------------------------------
  -- Data source for m_expected
  m_expected_fileread: PROCESS (m_addr_delay_1, tb_enb, ce_out)
    FILE fp: TEXT open READ_MODE is "m_expected.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(23 DOWNTO 0);

  BEGIN
    IF tb_enb /= '1' THEN
    ELSIF ce_out = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    m_expected <= signed(read_data(23 DOWNTO 0));
  END PROCESS m_expected_fileread;

  m_ref <= m_expected;

  m_signed_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      m_testFailure <= '0';
    ELSIF rising_edge(clk) THEN
      IF m_chkdata = '1' AND m_signed /= m_ref THEN
        m_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in m_signed: Expected " & to_hex(m_ref) & (" Actual " & to_hex(m_signed))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS m_signed_checker;

  
  b_ignCntDone <= '1' WHEN b_chkcnt /= to_unsigned(16#5#, 3) ELSE
      '0';

  b_needToCount <= ce_out AND b_ignCntDone;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 5
  b_IgnoreDataChecking_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      b_chkcnt <= to_unsigned(16#0#, 3);
    ELSIF rising_edge(clk) THEN
      IF b_needToCount = '1' THEN
        IF b_chkcnt >= to_unsigned(16#5#, 3) THEN 
          b_chkcnt <= to_unsigned(16#0#, 3);
        ELSE 
          b_chkcnt <= b_chkcnt + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS b_IgnoreDataChecking_process;


  
  b_chkenb <= '1' WHEN b_chkcnt = to_unsigned(16#5#, 3) ELSE
      '0';

  b_chkdata <= ce_out AND b_chkenb;

  b_addr_delay_1 <= m_addr AFTER 1 ns;

  -- b_signed <= signed(b);
  ------------------------------------------------------------------------------------- write b CSV
  b_signed <= signed(b);
  b_unsigned <= unsigned(b);
  file_open(b_unsigned_buf, "b_unsigned.csv"  , write_mode);
  process
	variable write_b : line;
	variable i : integer range 0 to 3000;
  begin
	wait for 71 ns;
	for i in 0 to 3000 loop
		write(write_b,to_integer(b_unsigned));
		write(write_b,string'(","));
		wait for 10 ns;
	end loop;
	writeline(b_unsigned_buf,write_b);
	wait;
  end process;
  -------------------------------------------------------------------------------------
  -- Data source for b_expected
  b_expected_fileread: PROCESS (b_addr_delay_1, tb_enb, ce_out)
    FILE fp: TEXT open READ_MODE is "b_expected.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(23 DOWNTO 0);

  BEGIN
    IF tb_enb /= '1' THEN
    ELSIF ce_out = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    b_expected <= signed(read_data(23 DOWNTO 0));
  END PROCESS b_expected_fileread;

  b_ref <= b_expected;

  b_signed_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      b_testFailure <= '0';
    ELSIF rising_edge(clk) THEN
      IF b_chkdata = '1' AND b_signed /= b_ref THEN
        b_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in b_signed: Expected " & to_hex(b_ref) & (" Actual " & to_hex(b_signed))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS b_signed_checker;

  testFailure <= m_testFailure OR b_testFailure;

  completed_msg: PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF snkDone = '1' THEN
        IF testFailure = '0' THEN
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (PASSED)**************"
            SEVERITY NOTE;
        ELSE
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (FAILED)**************"
            SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

END rtl;

